diff --git a/nixos/doc/manual/redirects.json b/nixos/doc/manual/redirects.json
index be29c7ca049a4b..56ea712840ee35 100644
--- a/nixos/doc/manual/redirects.json
+++ b/nixos/doc/manual/redirects.json
@@ -59,6 +59,9 @@
   "module-services-strfry-reverse-proxy": [
     "index.html#module-services-strfry-reverse-proxy"
   ],
+  "module-services-netbird-server-proxy": [
+    "index.html#module-services-netbird-server-proxy"
+  ],
   "preface": [
     "index.html#preface"
   ],
diff --git a/nixos/modules/services/networking/netbird/dashboard.nix b/nixos/modules/services/networking/netbird/dashboard.nix
index 788b724231be31..c8f6836f0af930 100644
--- a/nixos/modules/services/networking/netbird/dashboard.nix
+++ b/nixos/modules/services/networking/netbird/dashboard.nix
@@ -39,7 +39,7 @@ in
 
     package = mkPackageOption pkgs "netbird-dashboard" { };
 
-    enableNginx = mkEnableOption "Nginx reverse-proxy to serve the dashboard";
+    enableNginx = mkEnableOption "Nginx to serve the dashboard";
 
     domain = mkOption {
       type = str;
diff --git a/nixos/modules/services/networking/netbird/management.nix b/nixos/modules/services/networking/netbird/management.nix
index f05adb671e9923..1f26bf5b1f3168 100644
--- a/nixos/modules/services/networking/netbird/management.nix
+++ b/nixos/modules/services/networking/netbird/management.nix
@@ -38,7 +38,7 @@ let
     Stuns = [
       {
         Proto = "udp";
-        URI = "stun:${cfg.turnDomain}:3478";
+        URI = "stun:${cfg.management.turnDomain}:3478";
         Username = "";
         Password = null;
       }
@@ -48,7 +48,7 @@ let
       Turns = [
         {
           Proto = "udp";
-          URI = "turn:${cfg.turnDomain}:${builtins.toString cfg.turnPort}";
+          URI = "turn:${cfg.management.turnDomain}:${builtins.toString cfg.management.turnPort}";
           Username = "netbird";
           Password = "netbird";
         }
@@ -58,10 +58,14 @@ let
       Secret = "not-secure-secret";
       TimeBasedCredentials = false;
     };
+    Relay = {
+      Addresses = [ cfg.relay.settings.NB_EXPOSED_ADDRESS ];
+      CredentialsTTL = "24h";
+      Secret._secret = cfg.relay.authSecretFile;
+    };
 
     Signal = {
       Proto = "https";
-      URI = "${cfg.domain}:443";
       Username = "";
       Password = null;
     };
@@ -79,9 +83,9 @@ let
     };
 
     HttpConfig = {
-      Address = "127.0.0.1:${builtins.toString cfg.port}";
+      Address = "127.0.0.1:${builtins.toString cfg.management.port}";
       IdpSignKeyRefreshEnabled = true;
-      OIDCConfigEndpoint = cfg.oidcConfigEndpoint;
+      OIDCConfigEndpoint = cfg.management.oidcConfigEndpoint;
     };
 
     IdpManagerConfig = {
@@ -128,18 +132,18 @@ let
     };
   };
 
-  managementConfig = recursiveUpdate defaultSettings cfg.settings;
+  managementConfig = recursiveUpdate defaultSettings cfg.management.settings;
 
   managementFile = settingsFormat.generate "config.json" managementConfig;
 
-  cfg = config.services.netbird.server.management;
+  cfg = config.services.netbird.server;
 in
 
 {
   options.services.netbird.server.management = {
     enable = mkEnableOption "Netbird Management Service";
 
-    package = mkPackageOption pkgs "netbird" { };
+    package = mkPackageOption pkgs "netbird-server" { };
 
     domain = mkOption {
       type = str;
@@ -220,95 +224,93 @@ in
       inherit (settingsFormat) type;
 
       defaultText = literalExpression ''
-        defaultSettings = {
-          Stuns = [
+        Stuns = [
+          {
+            Proto = "udp";
+            URI = "stun:''${cfg.management.turnDomain}:3478";
+            Username = "";
+            Password = null;
+          }
+        ];
+
+        TURNConfig = {
+          Turns = [
             {
               Proto = "udp";
-              URI = "stun:''${cfg.turnDomain}:3478";
-              Username = "";
-              Password = null;
+              URI = "turn:''${cfg.management.turnDomain}:3478";
+              Username = "netbird";
+              Password = "netbird";
             }
           ];
 
-          TURNConfig = {
-            Turns = [
-              {
-                Proto = "udp";
-                URI = "turn:''${cfg.turnDomain}:3478";
-                Username = "netbird";
-                Password = "netbird";
-              }
-            ];
-
-            CredentialsTTL = "12h";
-            Secret = "not-secure-secret";
-            TimeBasedCredentials = false;
-          };
+          CredentialsTTL = "12h";
+          Secret = "not-secure-secret";
+          TimeBasedCredentials = false;
+        };
 
-          Signal = {
-            Proto = "https";
-            URI = "''${cfg.domain}:443";
-            Username = "";
-            Password = null;
-          };
+        Signal = {
+          Proto = "https";
+          URI = "localhost:''${cfg.signal.port}";
+          Username = "";
+          Password = null;
+        };
 
-          ReverseProxy = {
-            TrustedHTTPProxies = [ ];
-            TrustedHTTPProxiesCount = 0;
-            TrustedPeers = [ "0.0.0.0/0" ];
-          };
+        ReverseProxy = {
+          TrustedHTTPProxies = [ ];
+          TrustedHTTPProxiesCount = 0;
+          TrustedPeers = [ "0.0.0.0/0" ];
+        };
 
-          Datadir = "''${stateDir}/data";
-          DataStoreEncryptionKey = "genEVP6j/Yp2EeVujm0zgqXrRos29dQkpvX0hHdEUlQ=";
-          StoreConfig = { Engine = "sqlite"; };
+        Datadir = "/var/lib/netbird-mgmt/data";
+        DataStoreEncryptionKey = "genEVP6j/Yp2EeVujm0zgqXrRos29dQkpvX0hHdEUlQ=";
+        StoreConfig = { Engine = "sqlite"; };
 
-          HttpConfig = {
-            Address = "127.0.0.1:''${builtins.toString cfg.port}";
-            IdpSignKeyRefreshEnabled = true;
-            OIDCConfigEndpoint = cfg.oidcConfigEndpoint;
-          };
+        HttpConfig = {
+          Address = "127.0.0.1:''${builtins.toString cfg.management.port}";
+          IdpSignKeyRefreshEnabled = true;
+          OIDCConfigEndpoint = cfg.management.oidcConfigEndpoint;
+        };
 
-          IdpManagerConfig = {
-            ManagerType = "none";
-            ClientConfig = {
-              Issuer = "";
-              TokenEndpoint = "";
-              ClientID = "netbird";
-              ClientSecret = "";
-              GrantType = "client_credentials";
-            };
-
-            ExtraConfig = { };
-            Auth0ClientCredentials = null;
-            AzureClientCredentials = null;
-            KeycloakClientCredentials = null;
-            ZitadelClientCredentials = null;
+        IdpManagerConfig = {
+          ManagerType = "none";
+          ClientConfig = {
+            Issuer = "";
+            TokenEndpoint = "";
+            ClientID = "netbird";
+            ClientSecret = "";
+            GrantType = "client_credentials";
           };
 
-          DeviceAuthorizationFlow = {
-            Provider = "none";
-            ProviderConfig = {
-              Audience = "netbird";
-              Domain = null;
-              ClientID = "netbird";
-              TokenEndpoint = null;
-              DeviceAuthEndpoint = "";
-              Scope = "openid profile email offline_access api";
-              UseIDToken = false;
-            };
+          ExtraConfig = { };
+          Auth0ClientCredentials = null;
+          AzureClientCredentials = null;
+          KeycloakClientCredentials = null;
+          ZitadelClientCredentials = null;
+        };
+
+        DeviceAuthorizationFlow = {
+          Provider = "none";
+          ProviderConfig = {
+            Audience = "netbird";
+            Domain = null;
+            ClientID = "netbird";
+            TokenEndpoint = null;
+            DeviceAuthEndpoint = "";
+            Scope = "openid profile email offline_access api";
+            UseIDToken = false;
           };
+        };
 
-          PKCEAuthorizationFlow = {
-            ProviderConfig = {
-              Audience = "netbird";
-              ClientID = "netbird";
-              ClientSecret = "";
-              AuthorizationEndpoint = "";
-              TokenEndpoint = "";
-              Scope = "openid profile email offline_access api";
-              RedirectURLs = "http://localhost:53000";
-              UseIDToken = false;
-            };
+        PKCEAuthorizationFlow = {
+          ProviderConfig = {
+            Audience = "netbird";
+            ClientID = "netbird";
+            ClientSecret = "";
+            AuthorizationEndpoint = "";
+            TokenEndpoint = "";
+            Scope = "openid profile email offline_access api";
+            RedirectURLs = "http://localhost:53000";
+            UseIDToken = false;
           };
         };
       '';
@@ -340,11 +342,9 @@ in
       default = "INFO";
       description = "Log level of the netbird services.";
     };
-
-    enableNginx = mkEnableOption "Nginx reverse-proxy for the netbird management service";
   };
 
-  config = mkIf cfg.enable {
+  config = mkIf cfg.management.enable {
     warnings =
       concatMap
         (
@@ -368,7 +368,7 @@ in
 
     assertions = [
       {
-        assertion = cfg.port != cfg.metricsPort;
+        assertion = cfg.management.port != cfg.management.metricsPort;
         message = "The primary listen port cannot be the same as the listen port for the metrics endpoint";
       }
     ];
@@ -386,7 +386,7 @@ in
       serviceConfig = {
         ExecStart = escapeSystemdExecArgs (
           [
-            (getExe' cfg.package "netbird-mgmt")
+            (getExe' cfg.management.package "netbird-mgmt")
             "management"
             # Config file
             "--config"
@@ -396,28 +396,28 @@ in
             "${stateDir}/data"
             # DNS domain
             "--dns-domain"
-            cfg.dnsDomain
+            cfg.management.dnsDomain
             # Port to listen on
             "--port"
-            cfg.port
+            cfg.management.port
             # Port the internal prometheus server listens on
             "--metrics-port"
-            cfg.metricsPort
+            cfg.management.metricsPort
             # Log to stdout
             "--log-file"
             "console"
             # Log level
             "--log-level"
-            cfg.logLevel
+            cfg.management.logLevel
             #
             "--idp-sign-key-refresh-enabled"
             # Domain for internal resolution
             "--single-account-mode-domain"
-            cfg.singleAccountModeDomain
+            cfg.management.singleAccountModeDomain
           ]
-          ++ (optional cfg.disableAnonymousMetrics "--disable-anonymous-metrics")
-          ++ (optional cfg.disableSingleAccountMode "--disable-single-account-mode")
-          ++ cfg.extraOptions
+          ++ (optional cfg.management.disableAnonymousMetrics "--disable-anonymous-metrics")
+          ++ (optional cfg.management.disableSingleAccountMode "--disable-single-account-mode")
+          ++ cfg.management.extraOptions
         );
         Restart = "always";
         RuntimeDirectory = "netbird-mgmt";
@@ -452,27 +452,5 @@ in
       stopIfChanged = false;
     };
 
-    services.nginx = mkIf cfg.enableNginx {
-      enable = true;
-
-      virtualHosts.${cfg.domain} = {
-        locations = {
-          "/api".proxyPass = "http://localhost:${builtins.toString cfg.port}";
-
-          "/management.ManagementService/".extraConfig = ''
-            # This is necessary so that grpc connections do not get closed early
-            # see https://stackoverflow.com/a/67805465
-            client_body_timeout 1d;
-
-            grpc_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
-
-            grpc_pass grpc://localhost:${builtins.toString cfg.port};
-            grpc_read_timeout 1d;
-            grpc_send_timeout 1d;
-            grpc_socket_keepalive on;
-          '';
-        };
-      };
-    };
   };
 }
diff --git a/nixos/modules/services/networking/netbird/proxy.nix b/nixos/modules/services/networking/netbird/proxy.nix
new file mode 100644
index 00000000000000..1500d22e5cb7d1
--- /dev/null
+++ b/nixos/modules/services/networking/netbird/proxy.nix
@@ -0,0 +1,110 @@
+{ lib, config, ... }:
+let
+  inherit (lib)
+    mkEnableOption
+    mkIf
+    mkOption
+    mkDefault
+    ;
+  inherit (lib.types) str;
+  cfg = config.services.netbird.server.proxy;
+in
+{
+  options.services.netbird.server.proxy = {
+
+    enableNginx = mkEnableOption "Nginx reverse-proxy for the netbird signal service";
+
+    signalAddress = mkOption {
+      type = str;
+      description = "Address to reach the signal service.";
+      example = "1.2.3.4:1764";
+    };
+
+    relayAddress = mkOption {
+      type = str;
+      description = "The external address to reach the relay service.";
+    };
+
+    managementAddress = mkOption {
+      type = str;
+      description = "Address to reach the dashboard.";
+      example = "1.2.3.4:1766";
+    };
+
+    dashboardAddress = mkOption {
+      type = str;
+      description = "Address to reach the dashboard.";
+      example = "1.2.3.4:1767";
+    };
+
+    domain = mkOption {
+      type = str;
+      description = "Domain that hosts the proxy";
+      example = "netbird.selfhosted";
+    };
+  };
+  config = {
+    services.nginx = mkIf cfg.enableNginx {
+      enable = true;
+
+      virtualHosts.${cfg.domain} = {
+        forceSSL = mkDefault true;
+        extraConfig = ''
+          proxy_set_header        X-Real-IP $remote_addr;
+          proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
+          proxy_set_header        X-Scheme $scheme;
+          proxy_set_header        X-Forwarded-Proto https;
+          proxy_set_header        X-Forwarded-Host $host;
+          grpc_set_header         X-Forwarded-For $proxy_add_x_forwarded_for;
+        '';
+        locations = {
+          "/" = {
+            proxyPass = "http://${cfg.dashboardAddress}";
+            proxyWebsockets = true;
+          };
+          "/api".proxyPass = "http://${cfg.managementAddress}";
+
+          "/management.ManagementService/".extraConfig = ''
+            # This is necessary so that grpc connections do not get closed early
+            # see https://stackoverflow.com/a/67805465
+            client_body_timeout 1d;
+
+            grpc_pass grpc://${cfg.managementAddress};
+            grpc_read_timeout 1d;
+            grpc_send_timeout 1d;
+            grpc_socket_keepalive on;
+          '';
+        };
+        locations."/signalexchange.SignalExchange/".extraConfig = ''
+          # This is necessary so that grpc connections do not get closed early
+          # see https://stackoverflow.com/a/67805465
+          client_body_timeout 1d;
+
+          grpc_pass grpc://${cfg.signalAddress};
+          grpc_read_timeout 1d;
+          grpc_send_timeout 1d;
+          grpc_socket_keepalive on;
+        '';
+        locations."/relay".extraConfig = ''
+          proxy_pass http://${cfg.relayAddress}/relay;
+
+          # WebSocket support
+          proxy_http_version 1.1;
+          proxy_set_header Upgrade $http_upgrade;
+          proxy_set_header Connection "Upgrade";
+
+          # Timeout settings
+          proxy_read_timeout 3600s;
+          proxy_send_timeout 3600s;
+          proxy_connect_timeout 60s;
+
+          # Handle upstream errors
+          proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
+        '';
+      };
+    };
+  };
+  meta.maintainers = with lib.maintainers; [
+    patrickdag
+  ];
+}
diff --git a/nixos/modules/services/networking/netbird/relay.nix b/nixos/modules/services/networking/netbird/relay.nix
new file mode 100644
index 00000000000000..01c4186505b0c5
--- /dev/null
+++ b/nixos/modules/services/networking/netbird/relay.nix
@@ -0,0 +1,123 @@
+{
+  config,
+  lib,
+  pkgs,
+  utils,
+  ...
+}:
+
+let
+  inherit (lib)
+    getExe'
+    mkEnableOption
+    mkIf
+    mkPackageOption
+    mkOption
+    mkDefault
+    ;
+
+  inherit (lib.types)
+    port
+    str
+    attrsOf
+    bool
+    either
+    submodule
+    path
+    ;
+
+  cfg = config.services.netbird.server.relay;
+in
+
+{
+  options.services.netbird.server.relay = {
+    enable = mkEnableOption "Netbird's Relay Service";
+
+    package = mkPackageOption pkgs "netbird-server" { };
+
+    port = mkOption {
+      type = port;
+      default = 33080;
+      description = "Internal port of the relay server.";
+    };
+
+    settings = mkOption {
+      type = submodule {
+        freeformType = attrsOf (either str bool);
+        options.NB_EXPOSED_ADDRESS = mkOption {
+          type = str;
+          description = ''
+            The public address of this peer, to be distribute as part of relay operations.
+          '';
+        };
+      };
+
+      defaultText = ''
+        {
+          NB_LISTEN_ADDRESS = ":''${builtins.toString cfg.port}";
+          NB_METRICS_PORT = "9092";
+        }
+      '';
+
+      description = ''
+        An attribute set that will be set as the environment for the process.
+        Used for runtime configuration.
+        The exact values sadly aren't documented anywhere.
+        A starting point when searching for valid values is this [source file](https://github.com/netbirdio/netbird/blob/main/relay/cmd/root.go)
+      '';
+    };
+
+    authSecretFile = mkOption {
+      type = path;
+      description = ''
+        The path to a file containing the auth-secret used by netbird to connect to the relay server.
+      '';
+    };
+
+  };
+
+  config = mkIf cfg.enable {
+    services.netbird.server.relay.settings = {
+      NB_LISTEN_ADDRESS = mkDefault ":${builtins.toString cfg.port}";
+      NB_METRICS_PORT = mkDefault "9092"; # Upstream default is 9090 but this would clash for nixos where all services run on the same host
+    };
+    systemd.services.netbird-relay = {
+      after = [ "network.target" ];
+      wantedBy = [ "multi-user.target" ];
+      environment = cfg.settings;
+
+      script = ''
+        export NB_AUTH_SECRET="$(<${cfg.authSecretFile})"
+        ${getExe' cfg.package "netbird-relay"}
+      '';
+      serviceConfig = {
+
+        Restart = "always";
+        RuntimeDirectory = "netbird-mgmt";
+        StateDirectory = "netbird-mgmt";
+        WorkingDirectory = "/var/lib/netbird-mgmt";
+
+        # hardening
+        LockPersonality = true;
+        MemoryDenyWriteExecute = true;
+        NoNewPrivileges = true;
+        PrivateMounts = true;
+        PrivateTmp = true;
+        ProtectClock = true;
+        ProtectControlGroups = true;
+        ProtectHome = true;
+        ProtectHostname = true;
+        ProtectKernelLogs = true;
+        ProtectKernelModules = true;
+        ProtectKernelTunables = true;
+        ProtectSystem = true;
+        RemoveIPC = true;
+        RestrictNamespaces = true;
+        RestrictRealtime = true;
+        RestrictSUIDSGID = true;
+      };
+
+      stopIfChanged = false;
+    };
+  };
+}
diff --git a/nixos/modules/services/networking/netbird/server.md b/nixos/modules/services/networking/netbird/server.md
index 3649e97b379e5d..38fe184b943fa1 100644
--- a/nixos/modules/services/networking/netbird/server.md
+++ b/nixos/modules/services/networking/netbird/server.md
@@ -4,39 +4,63 @@ NetBird is a VPN built on top of WireGuard® making it easy to create secure pri
 
 ## Quickstart {#module-services-netbird-server-quickstart}
 
-To fully setup Netbird as a self-hosted server, we need both a Coturn server and an identity provider, the list of supported SSOs and their setup are available [on Netbird's documentation](https://docs.netbird.io/selfhosted/selfhosted-guide#step-3-configure-identity-provider-idp).
+To fully setup Netbird as a self-hosted server, you need a Coturn or relay server, a netbird-signal server, an identity provider, and
+a netbird management instance.
+A list of supported SSOs and their setup are available [on Netbird's documentation](https://docs.netbird.io/selfhosted/selfhosted-guide#step-3-configure-identity-provider-idp).
 
-There are quite a few settings that need to be passed to Netbird for it to function, and a minimal config looks like :
+There are quite a few settings that need to be passed to Netbird for it to function, and a minimal config might look like :
+
+::: {.example}
+
+# Netbird minmal Configuration
 
 ```nix
-services.netbird.server = {
-  enable = true;
+{pkgs, ...}: {
+  services.netbird.server = {
+    enable = true;
 
-  domain = "netbird.example.selfhosted";
+    # Publicly exposed domain
+    domain = "netbird.example.selfhosted";
 
-  enableNginx = true;
+    # website for administration
+    dashboard = {
+      enableNginx = true;
+      settings.AUTH_AUTHORITY = "https://sso.example.selfhosted/oauth2/openid/netbird";
+    };
 
-  coturn = {
-    enable = true;
+    # Netbirds own relay implementation
+    relay.authSecretFile = pkgs.writeText "secret-file" "very secure secret";
 
-    passwordFile = "/path/to/a/secret/password";
-  };
+    # Relay using coturn
+    coturn = {
+      enable = true;
+      passwordFile = pkgs.writeText "password-file" "very secure password";
+    };
 
-  management = {
-    oidcConfigEndpoint = "https://sso.example.selfhosted/oauth2/openid/netbird/.well-known/openid-configuration";
-
-    settings = {
-      TURNConfig = {
-        Turns = [
-          {
-            Proto = "udp";
-            URI = "turn:netbird.example.selfhosted:3478";
-            Username = "netbird";
-            Password._secret = "/path/to/a/secret/password";
-          }
-        ];
-      };
+    # Backend management api
+    management = {
+      oidcConfigEndpoint = "https://sso.example.selfhosted/oauth2/openid/netbird/.well-known/openid-configuration";
+      settings.Signal.URI = "publicly reachable signal endpoint";
+      DataStoreEncryptionKey._secret = pkgs.writeText "encryption-key" "another very secure secret";
     };
   };
-};
+}
 ```
+:::
+
+## Proxy {#module-services-netbird-server-proxy}
+
+The proxy module sets up a unified nginx proxy in front of your netbird instance.
+
+::: {.warning}
+The proxy module is completely independent from netbird upstream.
+If you have any problems with it DO NOT open an issue in any `netbirdio` repositories. Instead open them in [`nixos/nixpkgs`](https://github.com/nixos/nixpkgs/issues) and ping the proxy maintainers.
+:::
+
+The proxy assumes being hosted over https.
+
+When using the proxy remember to set all public address options to use the proxy host instead of the instance itself. These include:
+
+- {option}`server.domain`
+- {option}`management.settings.Signal.URI`
+- {option}`relay.setting.NB_EXPOSED_ADDRESS`
diff --git a/nixos/modules/services/networking/netbird/server.nix b/nixos/modules/services/networking/netbird/server.nix
index 5865e06f18d0c2..362e070416047d 100644
--- a/nixos/modules/services/networking/netbird/server.nix
+++ b/nixos/modules/services/networking/netbird/server.nix
@@ -26,12 +26,12 @@ in
     ./dashboard.nix
     ./management.nix
     ./signal.nix
+    ./relay.nix
+    ./proxy.nix
   ];
 
   options.services.netbird.server = {
-    enable = mkEnableOption "Netbird Server stack, comprising the dashboard, management API and signal service";
-
-    enableNginx = mkEnableOption "Nginx reverse-proxy for the netbird server services";
+    enable = mkEnableOption "Netbird Server stack, comprising the dashboard, management API, relay and signal service";
 
     domain = mkOption {
       type = str;
@@ -44,7 +44,6 @@ in
       dashboard = {
         domain = mkDefault cfg.domain;
         enable = mkDefault cfg.enable;
-        enableNginx = mkDefault cfg.enableNginx;
 
         managementServer = "https://${cfg.domain}";
       };
@@ -53,13 +52,13 @@ in
         {
           domain = mkDefault cfg.domain;
           enable = mkDefault cfg.enable;
-          enableNginx = mkDefault cfg.enableNginx;
         }
         // (optionalAttrs cfg.coturn.enable rec {
           turnDomain = cfg.domain;
-          turnPort = config.services.coturn.tls-listening-port;
+          turnPort = config.services.coturn.listening-port;
           # We cannot merge a list of attrsets so we have to redefine the whole list
           settings = {
+            Signal.URI = mkDefault "${cfg.domain}:${builtins.toString cfg.signal.port}";
             TURNConfig.Turns = mkDefault [
               {
                 Proto = "udp";
@@ -76,9 +75,12 @@ in
         });
 
       signal = {
-        domain = mkDefault cfg.domain;
         enable = mkDefault cfg.enable;
-        enableNginx = mkDefault cfg.enableNginx;
+      };
+
+      relay = {
+        settings.NB_EXPOSED_ADDRESS = mkDefault "rel://${cfg.domain}:${builtins.toString cfg.relay.port}";
+        enable = mkDefault cfg.enable;
       };
 
       coturn = {
diff --git a/nixos/modules/services/networking/netbird/signal.nix b/nixos/modules/services/networking/netbird/signal.nix
index 3122b6c9fe5ffe..cf19439e892713 100644
--- a/nixos/modules/services/networking/netbird/signal.nix
+++ b/nixos/modules/services/networking/netbird/signal.nix
@@ -31,14 +31,7 @@ in
   options.services.netbird.server.signal = {
     enable = mkEnableOption "Netbird's Signal Service";
 
-    package = mkPackageOption pkgs "netbird" { };
-
-    enableNginx = mkEnableOption "Nginx reverse-proxy for the netbird signal service";
-
-    domain = mkOption {
-      type = str;
-      description = "The domain name for the signal service.";
-    };
+    package = mkPackageOption pkgs "netbird-server" { };
 
     port = mkOption {
       type = port;
@@ -134,23 +127,5 @@ in
       stopIfChanged = false;
     };
 
-    services.nginx = mkIf cfg.enableNginx {
-      enable = true;
-
-      virtualHosts.${cfg.domain} = {
-        locations."/signalexchange.SignalExchange/".extraConfig = ''
-          # This is necessary so that grpc connections do not get closed early
-          # see https://stackoverflow.com/a/67805465
-          client_body_timeout 1d;
-
-          grpc_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
-
-          grpc_pass grpc://localhost:${builtins.toString cfg.port};
-          grpc_read_timeout 1d;
-          grpc_send_timeout 1d;
-          grpc_socket_keepalive on;
-        '';
-      };
-    };
   };
 }
diff --git a/nixos/tests/netbird.nix b/nixos/tests/netbird.nix
index f684a310426516..258d3c91a99fc8 100644
--- a/nixos/tests/netbird.nix
+++ b/nixos/tests/netbird.nix
@@ -1,9 +1,14 @@
 import ./make-test-python.nix (
-  { pkgs, lib, ... }:
+  { pkgs, ... }:
+  let
+    tls_chain = "${./common/acme/server}/ca.cert.pem";
+    tls_key = "${./common/acme/server}/ca.key.pem";
+  in
   {
     name = "netbird";
 
     meta.maintainers = with pkgs.lib.maintainers; [
+      patrickdag
       nazarewk
     ];
 
@@ -14,6 +19,35 @@ import ./make-test-python.nix (
           services.netbird.enable = true;
           services.netbird.clients.custom.port = 51819;
         };
+      kanidm = {
+        services.kanidm = {
+          # needed since default for nixos 24.11
+          # is kanidm 1.4.6 which is insecure
+          package = pkgs.kanidm_1_5;
+          enableServer = true;
+          serverSettings = {
+            inherit tls_key tls_chain;
+            domain = "localhost";
+            origin = "https://localhost";
+          };
+        };
+      };
+      server =
+        { ... }:
+        {
+          # netbirds needs an openid identity provider
+          services.netbird.server = {
+            enable = true;
+            coturn = {
+              enable = true;
+              password = "secure-password";
+            };
+            domain = "nixos-test.internal";
+            dashboard.settings.AUTH_AUTHORITY = "https://kanidm/oauth2/openid/netbird";
+            management.oidcConfigEndpoint = "https://kanidm:8443/oauth2/openid/netbird/.well-known/openid-configuration";
+            relay.authSecretFile = (pkgs.writeText "secure-secret" "secret-value");
+          };
+        };
     };
 
     # TODO: confirm the whole solution is working end-to-end when netbird server is implemented
@@ -35,25 +69,15 @@ import ./make-test-python.nix (
 
       did_start(clients, "netbird")
       did_start(clients, "netbird-custom")
-    '';
 
-    /*
-      `netbird status` used to print `Daemon status: NeedsLogin`
-          https://github.com/netbirdio/netbird/blob/23a14737974e3849fa86408d136cc46db8a885d0/client/cmd/status.go#L154-L164
-      as the first line, but now it is just:
+      kanidm.start()
+      kanidm.wait_for_unit("kanidm.service")
 
-          Daemon version: 0.26.3
-          CLI version: 0.26.3
-          Management: Disconnected
-          Signal: Disconnected
-          Relays: 0/0 Available
-          Nameservers: 0/0 Available
-          FQDN:
-          NetBird IP: N/A
-          Interface type: N/A
-          Quantum resistance: false
-          Routes: -
-          Peers count: 0/0 Connected
-    */
+      server.start()
+      with subtest("server starting"):
+        server.wait_for_unit("netbird-management.service")
+        server.wait_for_unit("netbird-signal.service")
+        server.wait_for_unit("netbird-relay.service")
+    '';
   }
 )
diff --git a/pkgs/by-name/ne/netbird-server/package.nix b/pkgs/by-name/ne/netbird-server/package.nix
new file mode 100644
index 00000000000000..b521e828756735
--- /dev/null
+++ b/pkgs/by-name/ne/netbird-server/package.nix
@@ -0,0 +1,6 @@
+{ netbird }:
+
+netbird.override {
+  client = false;
+  server = true;
+}
diff --git a/pkgs/by-name/ne/netbird/package.nix b/pkgs/by-name/ne/netbird/package.nix
index faee3cb4e78ab2..7404fe2620fbc0 100644
--- a/pkgs/by-name/ne/netbird/package.nix
+++ b/pkgs/by-name/ne/netbird/package.nix
@@ -13,21 +13,40 @@
   libXcursor,
   libXxf86vm,
   ui ? false,
+  client ? true,
+  server ? false,
   netbird-ui,
   versionCheckHook,
 }:
 let
   modules =
-    if ui then
-      {
-        "client/ui" = "netbird-ui";
-      }
-    else
-      {
-        client = "netbird";
-        management = "netbird-mgmt";
-        signal = "netbird-signal";
-      };
+    { }
+    // (
+      if ui then
+        {
+          "client/ui" = "netbird-ui";
+        }
+      else
+        { }
+    )
+    // (
+      if client then
+        {
+          client = "netbird";
+        }
+      else
+        { }
+    )
+    // (
+      if server then
+        {
+          management = "netbird-mgmt";
+          signal = "netbird-signal";
+          relay = "netbird-relay";
+        }
+      else
+        { }
+    );
 in
 buildGoModule (finalAttrs: {
   pname = "netbird";
@@ -79,7 +98,8 @@ buildGoModule (finalAttrs: {
         ''
           mv $out/bin/${lib.last (lib.splitString "/" module)} $out/bin/${binary}
         ''
-        + lib.optionalString (stdenv.buildPlatform.canExecute stdenv.hostPlatform && !ui) ''
+        # relay has no completions, in which case the completion subcommand will error
+        + lib.optionalString (module != "relay" && module != "client/ui") ''
           installShellCompletion --cmd ${binary} \
             --bash <($out/bin/${binary} completion bash) \
             --fish <($out/bin/${binary} completion fish) \
@@ -99,7 +119,7 @@ buildGoModule (finalAttrs: {
     versionCheckHook
   ];
   versionCheckProgram = "${placeholder "out"}/bin/${finalAttrs.meta.mainProgram}";
-  versionCheckProgramArg = "version";
+  versionCheckProgramArg = if server then "--version" else "version";
   # Disabled for the `netbird-ui` version because it does a network request.
   doInstallCheck = !ui;
 
@@ -119,7 +139,14 @@ buildGoModule (finalAttrs: {
     maintainers = with lib.maintainers; [
       vrifox
       saturn745
+      patrickdag
     ];
-    mainProgram = if ui then "netbird-ui" else "netbird";
+    mainProgram =
+      if ui then
+        "netbird-ui"
+      else if server then
+        "netbird-mgmt"
+      else
+        "netbird";
   };
 })
